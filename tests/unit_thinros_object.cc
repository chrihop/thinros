#include "thinros_core.h"
#include "thinros_object.h"

// t1 -> pipe_a -> t2

THINROS_OBJECT_INTERFACE;

STARTUP(pipe_a)
{
    info("pipe_a startup\n");
}

SHUTDOWN(pipe_a)
{
    info("pipe_a shutdown\n");
}

SPIN(pipe_a, i)
{
    info("pipe_a spin %lu\n", i);
    return i < 10000;
}

// generated by stub-generator
#define P_TOPIC_t1     0
#define P_TOPIC_t2     1

// generated by smasher
THINROS_NS_DEFINE(pipe_a,
    NS_LIST(
        NS_MAP(P, t1, 0),
        NS_MAP(P, t2, 1)
    ),
    NS_LIST());

MESSAGE_HANDLER(pipe_a, t1, data)
{
    msg_t1_t * t1 = (msg_t1_t *)data;
    info("pipe_a receive t1: seq = %u\n", t1->sequence);

    msg_t2_t msg;
    msg.sequence = t1->sequence + 1;
    NS_THINROS_PUBLISH(USE_NS(pipe_a), t2, &msg, sizeof(msg_t2_t));
}

THINROS_OBJ(pipe_a, USE_STARTUP(pipe_a), USE_SHUTDOWN(pipe_a), USE_SPIN(pipe_a),
    ADVERTISE("t2"),
    SUBSCRIBE(ON_MESSAGE(t1, USE_MESSAGE_HANDLER(pipe_a, t1))));


// pub_a -> t1
STARTUP(pub_a)
{
    info("pub_a startup\n");
}

SHUTDOWN(pub_a)
{
    info("pub_a shutdown\n");
}

// generated by stub-generator
#define PUBLISH_TOPIC_t1     0

// generated by smasher
THINROS_NS_DEFINE(pub_a,
    NS_LIST(
        NS_MAP(P, t1, 0)
    ),
    NS_LIST());


SPIN(pub_a, i)
{
    info("pub_a spin %lu\n", i);
    if (i % 10 == 0)
    {
        msg_t1_t msg;
        msg.sequence = i;
        NS_THINROS_PUBLISH(USE_NS(pub_a), t1, &msg, sizeof(msg_t1_t));
        NS_THINROS_PUBLISH(USE_NS(pub_a), t1, &msg, sizeof(msg_t1_t));
        NS_THINROS_PUBLISH(USE_NS(pub_a), t1, &msg, sizeof(msg_t1_t));
        info("pub_a publish t1 x 3\n");
    }

    return true;
}

THINROS_OBJ(pub_a, USE_STARTUP(pub_a), USE_SHUTDOWN(pub_a), USE_SPIN(pub_a),
    ADVERTISE("t1"), SUBSCRIBE({}));


// t2 -> sub_c

STARTUP(sub_c)
{
    info("sub_c startup\n");
}

SHUTDOWN(sub_c)
{
    info("sub_c shutdown\n");
}

SPIN(sub_c, i)
{
    info("sub_c spin %lu\n", i);
    return true;
}

THINROS_NS_DEFINE(sub_c,
    NS_LIST(),
    NS_LIST());

MESSAGE_HANDLER(sub_c, t2, data)
{
    msg_t2_t * t2 = (msg_t2_t *)data;
    info("sub_c receive t2: seq = %u\n", t2->sequence);
}

THINROS_OBJ(sub_c,
    USE_STARTUP(sub_c), USE_SHUTDOWN(sub_c), USE_SPIN(sub_c),
    ADVERTISE({}),
    SUBSCRIBE(ON_MESSAGE(t2, USE_MESSAGE_HANDLER(sub_c, t2))));

// flattening
#define aac AGGR(pub_a, AGGR(pipe_a, sub_c))

CALLBACKS_ON_OBJ(USE_STARTUP(aac),
    USE_STARTUP(pub_a),
    USE_STARTUP(pipe_a));

CALLBACKS_ON_OBJ(USE_SHUTDOWN(aac),
    USE_SHUTDOWN(pub_a),
    USE_SHUTDOWN(pipe_a));

CALLBACKS_ON_SPIN(USE_SPIN(aac),
    USE_SPIN(pub_a),
    USE_SPIN(pipe_a));

CALLBACKS_ON_MSG(aggregate_on_t1,
    USE_MESSAGE_HANDLER(pipe_a, t1));

THINROS_OBJ(pub_pipe_sub,
    USE_STARTUP(aac), USE_SHUTDOWN(aac), USE_SPIN(aac),
    ADVERTISE("t1", "t2"),
    SUBSCRIBE(
        ON_MESSAGE(t1, USE_MESSAGE_HANDLER(pipe_a, t1)),
        ON_MESSAGE(t2, USE_MESSAGE_HANDLER(sub_c, t2))
    ));

//THINROS_MAIN(pipe_a);
//THINROS_MAIN(pub_a);
//THINROS_MAIN(sub_c);
THINROS_MAIN(pub_pipe_sub);

